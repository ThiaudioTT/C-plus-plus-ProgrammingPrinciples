1. What is the purpose of working on the program after the first version 
works? Give a list of reasons.
R: For implementation. First we get our program to run, then we implemented it.
The reasons are:
To get new stuff, like new functions
To clean the code

2. Why does 1+2; q typed into the calculator not quit after it receives an 
error?
R: Because it is inside a while loop.

3. Why did we choose to make a constant character called number?
R: To make it more readable. It is a magic constant ch4.3.1


4. We split main() into two separate functions. What does the new function 
do and why did we split main()?
R: See ch 7.6.2
Because main deals with the executation of the program and the others functions deals with
the calculation.
"Ideally, a function performs a single logical action (ยง4.5.1). Having main() perform both of these actions obscures the structure of the program. The obvious 
solution is to make the calculation loop into a separate function calculate():"

5. Why do we split code into multiple functions? State principles.
R: Again, 7.6.2
"The functions we use should reflect the structure of our program, and the names 
of the functions should identify the logically separate parts of our code"

6. What is the purpose of commenting and how should it be done?
R: We tend to forget the logic behind the prorgam, so comments will help understand
the logic.
The rules for comment should be:
     Adequate for a reader
     Not so verbose that they distract from the code
     Not commenting when we can say in code

7. What does narrow_cast do?
R: ch7.5 -> gives a message error.
"Alternatively, we can prohibit the use of % on a floating-point argument. We 
check if the floating-point operands have fractional parts and give an error message if they do. The problem of ensuring int operands for % is a variant of the 
narrowing problem (ยง3.9.2 and ยง5.6.4), so we could solve it using narrow_cast"

8. What is the use of symbolic constants?
R: Same as review 3. ch7.6.1
We use it because it's hard to remember and error prone...

9. Why do we care about code layout?
R: To make it more readable and reduce bugs.
7.6.3

10. How do we handle % (remainder) of floating-point numbers?
R: There's no remainder for floating point numbers.

11. What does is_declared() do and how does it work?
R: return a bool value checking if the parameter string s is already in the variables database.

12. The input representation for let is more than one character. How is it 
accepted as a single token in the modified code?
R: because get() detect when a uncommon token get in, so we define a string and
read the input and return a token with the value L. 

13. What are the rules for what names can and cannot be in the calculator 
program?
R: should not be underscore, initial numbers, spaces and espacial chars etc..
See ch7.8

14. Why is it a good idea to build a program incrementally?
R: Because the program solves the problem first, and then we increment it to solve better.
The program comes faster and do a good develop.

15. When do you start to test?
R: always test it, when you finish a stage, test it.

16. When do you retest?
R: When a implementation comes

17. How do you decide what should be a separate function?
R: Again, 7.6.2 and 4.5.1
When the logic of the function doesn't match to the actual function.

18. How do you choose names for variables and functions? List possible 
reasons.
R: The var name should be

Easy to understand and read.
Not too long and not too short.

9. Why do you add comments?
R: same in review question 6

20. What should be in comments and what should not?
R:
What should be said in code doesn't should be said in comments. See review 6.

21. When do we consider a program finished?
R: Is when the program solves the problem efficiently.
