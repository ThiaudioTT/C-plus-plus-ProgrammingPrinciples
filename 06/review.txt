1. What do we mean by “Programming is understanding”?
R: Ch 6.1 

Because we need to understand the problem first and then solve the program: 

"Writing a program starts with a problem; that is, you have a problem that you’d 
like a program to help solve. Understanding that problem is key to a good program. After all, a program that solves the wrong problem is likely to be of little use 
to you, however elegant it may be."

2. The chapter details the creation of a calculator program. Write a short 
analysis of what the calculator should be able to do.
R:

The calculator should be able to do:
- Receive integers, floit point numbers and characters (representing the mathematical operation) as a input

- The calculator should do 4 operations (+ - / * ) and give the correct outputs.

- The calculator need to have a character for quit the program.


3. How do you break a problem up into smaller manageable parts?
R: 6.2.2
"Try breaking the program into manageable parts. Even the smallest program for solving a real problem is large enough to be subdivided."

- Create a prototype a small version of the program who solves part of the problem. 
- See if tools, libraries is available for your project.
- Break your project in minor types, like building a car (or even a computer) each piece has its own fuction, like the doors, engine, wheels...


4. Why is creating a small, limited version of a program a good idea?
R: 6.2.2

When we start, we rarely know the problem well. We often think we do (don’t we know what a calculator program is?), but we don’t. 
Only a  combination of thinking about the problem (analysis) and experimentation 
(design and implementation) gives us the solid understanding that we need 
to write a good program. So, we build a small, limited version
• To bring out problems in our understanding, ideas, and tools.
• To see if details of the problem statement need changing to make the 
problem manageable. It is rare to fi nd that we had anticipated everything when we analyzed the problem and made the initial design. We 
should take advantage of the feedback that writing code and testing give us

5. Why is feature creep a bad idea?
R: 6.3.5

Because  it is hard to stop. It's good to make the program solve the problem first, later whe can add more functions.
Adding too much functions in early stages is hard to develop. See ch6.3.5

6. What are the three main phases of software development?
R: 6.2.1

analysis, design, implementation. See ch 6.2.1

7. What is a “use case”?
R:
A specific (typically simple) use of a program meant to test its functionality and demonstrate its purpose

8. What is the purpose of testing?
R:
Testing allow us to know if our program is giving us what we need (searching for errors). Not only that, but implement our program.

9. According to the outline in the chapter, describe the difference between a 
Term, an Expression, a Number, and a Primary.
R:
All of them is grammar. But According to the grammar:

A number is a floating-point literal. A Primary is a number or a expression contained parenthesis. A Term is a Primary or a term followed by one of the
mathematical operations (* / %) and a Primary. An expression is a Term, or a expression followed by plus (or minus) followed by a term.

10. In the chapter, an input was broken down into its component Terms, Expressions, Primarys, and Numbers. Do this for (17+4)/(5–1)
R: Parsing (17+4)/(5–1). R: 6.4

() is a Primary -> Term -> expression.
17 -> number -> Primary -> Term -> Expression
+ -> Expression.
/ -> Term, Expression.
5 -> number, Primary, term, expression.
- -> expression.
1 -> number, Primary, term, expression.

11. Why does the program not have a function called number()?
R: because number() is simple, we already have a type for that, (floating-point numbers)
::get() already do this work for us.

12. What is a token?
R: 6.4 ^ 6.3.3 
A token is a sequence of characters that represents something we consider a unit, 
such as a number or an operator. But in the code: A Token is a type (like int or char), so it can be used to define variables and hold 
values. It has two parts (called members): kind and value.

13. What is a grammar? A grammar rule?
R: See A.6

The use of grammar is to define the syntax of the input and then implement these rules in program.

14. What is a class? What do we use classes for?
R: The keyword class means “user-defined type”; it indicates that a type with zero or more members is being 
defined. See more in this video: https://youtu.be/2BP8NhxjrO0

15. How can we provide a default value for a member of a class?
R:

class clasi
{
    public:
        int value = default;
};

16. In the expression function, why is the default for the switch-statement to “put back” the token?
R:
For the next function using this token, when we not return, the next function picks the next token.

17. What is “look-ahead”?
R:
---------------------

18. What does putback() do and why is it useful?
R:
Attempts to decrease the current location in the stream by one character, making the last character extracted from the stream once again available to be extracted by input operations.
This is useful because the next functions in our grammar can use it again.

19. Why is the remainder (modulus) operation, %, difficult to implement in 
the term()?
R: Because modulo is not defined for non integers.

20. What do we use the two data members of the Token class for?
R: 
To specify the kind of the token and its value.

21. Why do we (sometimes) split a class’s members into private and public
members?
R:
This is the access modifier, second the author:

The public interface should contain (only) what a user needs, 
which is typically a set of functions. The private implementation contains what is 
necessary to implement those public functions, typically data and functions dealing 
with messy details that the users need not know about and shouldn’t directly use

See https://www.geeksforgeeks.org/access-modifiers-in-c/

22. What happens in the Token_stream class when there is a token in the 
buffer and the get() function is called?
R:
get() pick the next token.

23. Why were the ';' and 'q' characters added to the switch-statement in the 
get() function of the Token_stream class?
R:
repespectively to print and quit.

24. When should we start testing our program?
R:
When we want to search for errors. Always test your programs.

25. What is a “user-defined type”? Why would we want one?
R:
Is class. When defining a type we can have a variaty of types for our programs, token is an example of this.
See more in https://structuralismtheory.com/qa/why-are-user-defined-data-types-necessary.html

26. What is the interface to a C++ “user-defined type”?
R:
class type{
    ...
};

27. Why do we want to rely on libraries of code?
R:
Second the author:

Please note how we again and again avoid doing complicated work and instead find simpler solutions – often relying on library facilities. That’s the essence 
of programming: the continuing search for simplicity. Sometimes that’s – somewhat facetiously – expressed as “Good programmers are lazy.” In that sense (and 
only in that sense), we should be “lazy”; why write a lot of code if we can find a 
way of writing far less?
